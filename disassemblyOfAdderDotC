
#Disassembly of adder2 dot c with comments for week 2 lab 
adder:  file format mach-o 64-bit x86-64

Disassembly of section __TEXT,__text:

0000000100003f50 <_adder2>:
100003f50: 55                           pushq   %rbp     #save the frame pointer by pushing the value q in %rbp onto stack
100003f51: 48 89 e5                     movq    %rsp, %rbp #set frame pointer to point to adder2 
100003f54: 89 7d fc                     movl    %edi, -4(%rbp) #save the int argument l passed to a register 4 bytes lower than %rbp
100003f57: 8b 45 fc                     movl    -4(%rbp), %eax #Unnecessary instruction loading same int argument into %eax it came from, why?
100003f5a: 83 c0 02                     addl    $2, %eax #add 2 (expressed as an int) to the argument in %eax
100003f5d: 5d                           popq    %rbp #pop the %rbp value (a long or pointer) off the stack and point frame pointer back at the function that called this one
100003f5e: c3                           retq #return statement for function adder2
100003f5f: 90                           nop #no-operation (wasted CPU time?)

0000000100003f60 <_main>:
100003f60: 55                           pushq   %rbp  #pushes base pointer value q onto stack
100003f61: 48 89 e5                     movq    %rsp, %rbp #moves the pointer value q from stack pointer register to base pointer register
100003f64: 48 83 ec 10                  subq    $16, %rsp #subtracts 16 bytes from stack pointer, puts value in it, growing stack by 16b
100003f68: c7 45 fc 00 00 00 00         movl    $0, -4(%rbp) #stores a value of 0 into the memory 4 bytes below the stack pointer
100003f6f: c7 45 f8 28 00 00 00         movl    $40, -8(%rbp) #stores a value of 40 into memory 8 bytes below the stack pointer
100003f76: 8b 7d f8                     movl    -8(%rbp), %edi #moves the value in -8(%rbp) which is 40 into register %edi
100003f79: e8 d2 ff ff ff               callq   0x100003f50 <_adder2> #calls the function adder2 which runs and then returns here afterwards
100003f7e: 89 45 f8                     movl    %eax, -8(%rbp) #moves the value from %eax (the return from adder2?) into memory 8 bytes below %rbp
100003f81: 8b 75 f8                     movl    -8(%rbp), %esi #moves value from stack at -8(%rbp) to register %esi
100003f84: 48 8d 3d 15 00 00 00         leaq    21(%rip), %rdi          ## 0x100003fa0 <_printf+0x100003fa0> #load effective address, adds 21 to value in %rip, which loads the address of the string to be printed to %rdi
100003f8b: b0 00                        movb    $0, %al # moves a byte (0) into the register location %al which is the lower 8 bits of a register
100003f8d: e8 08 00 00 00               callq   0x100003f9a <_printf+0x100003f9a> #calls the printf function which is located at the register that is passed as an argument to jump to
100003f92: 31 c0                        xorl    %eax, %eax #this does an Xor of %eax with itself, which is supposed to delete the value in it?
100003f94: 48 83 c4 10                  addq    $16, %rsp #adds 16 to the stack pointer, which points it somewhere.
100003f98: 5d                           popq    %rbp #pops the base pointer off the stack, because it is no longer being used.
100003f99: c3                           retq #return statement

Disassembly of section __TEXT,__stubs:

0000000100003f9a <__stubs>:
100003f9a: ff 25 60 00 00 00            jmpq    *96(%rip)               ## 0x100004000 <_printf+0x100004000> # this holds the address of the printf function that gets jumped to when it is called
~